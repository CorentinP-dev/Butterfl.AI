import openai
import sqlite3
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("La cl√© API OpenAI est manquante. Ajoutez-la dans le fichier .env")


# Initialisation de la base de donn√©es pour stocker les r√©sum√©s
def init_db():
    conn = sqlite3.connect("summary.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS summaries (
                        conversation_id TEXT PRIMARY KEY,
                        summary TEXT
                    )''')
    conn.commit()
    conn.close()


# Fonction pour r√©cup√©rer le dernier r√©sum√© de la conversation
def get_latest_summary(conversation_id):
    conn = sqlite3.connect("summary.db")
    cursor = conn.cursor()
    cursor.execute("SELECT summary FROM summaries WHERE conversation_id = ?", (conversation_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else ""  # Retourne le r√©sum√© ou une cha√Æne vide


# Fonction pour g√©n√©rer un r√©sum√© avec OpenAI GPT-4
def generate_summary(text):
    client = openai.OpenAI()  # Initialisation du client OpenAI
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system",
             "content": "Tu es un narrateur d'histoires alternatives. Ta t√¢che est de r√©sumer les √©v√©nements fictifs cr√©√©s par le joueur dans le cadre d'une uchronie."},
            {"role": "user",
             "content": f"""
            üìú **Histoire alternative actuelle** :  
            {text}

            ‚úçÔ∏è **Instructions pour le r√©sum√©** :  
            - R√©sume les √©v√©nements cl√©s de l‚Äôhistoire alternative de mani√®re concise mais d√©taill√©e (5 √† 7 phrases maximum).  
            - Maintiens la coh√©rence avec l‚Äôunivers uchronique et les d√©cisions du joueur.  
            - Conserve un ton narratif immersif pour faciliter la continuit√© de l‚Äôhistoire.

            ‚ú® G√©n√®re maintenant un r√©sum√© dynamique respectant ces principes.
            """}
        ],
        temperature=0.5
    )
    return response.choices[0].message.content


# Fonction pour mettre √† jour le r√©sum√© dans la base de donn√©es
def update_summary(conversation_id, new_text):
    summary = get_latest_summary(conversation_id) + " " + new_text  # Ajout du nouveau texte au r√©sum√© existant
    summary = generate_summary(summary)  # G√©n√©ration d'un r√©sum√© condens√©

    conn = sqlite3.connect("summary.db")
    cursor = conn.cursor()
    cursor.execute("REPLACE INTO summaries (conversation_id, summary) VALUES (?, ?)", (conversation_id, summary))
    conn.commit()
    conn.close()

    return summary


# Initialiser la base de donn√©es au d√©marrage
init_db()
