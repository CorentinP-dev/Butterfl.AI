import openai
from backend.summary_manager import get_latest_summary, update_summary
from vector_database.index_documents import get_events_for_conversation, add_alternative_event

# Fonction pour appeler l'API OpenAI et g√©n√©rer une r√©ponse
def call_openai_api(conversation_id, user_input, temperature=0.7):
    client = openai.OpenAI()

    # V√©rification de la temp√©rature avant envoi
    print(f"üîµ Temp√©rature envoy√©e √† OpenAI: {temperature}")

    # R√©cup√©rer le dernier r√©sum√© g√©n√©r√©
    summary = get_latest_summary(conversation_id)

    # R√©cup√©rer les √©v√©nements pass√©s
    events = get_events_for_conversation(conversation_id, n_results=5)
    events_text = "\n".join([f"- {event['title']}: {event['description']}" for event in events])

    # Construire le prompt
    prompt = f"""
    **Jeu narratif interactif - Histoire alternative** 

    **Contexte de l‚Äôhistoire alternative actuelle** :  
    {summary}

    **√âv√©nements pass√©s importants** :  
    {events_text}

    **Action du joueur** :  
    {user_input}

    **R√®gles pour g√©n√©rer la suite :**  
    1. Respecte l‚Äôhistoire alternative en cours. Ne reviens jamais √† la r√©alit√© historique initiale.  
    2. Adopte un ton immersif et captivant. D√©cris les cons√©quences du choix du joueur avec d√©tails.  
    3. Propose syst√©matiquement des choix interactifs √† la fin du texte, permettant au joueur d‚Äôinfluencer la suite du r√©cit.  
    4. Ajoute un sentiment de progression. Le joueur doit sentir que ses d√©cisions influencent r√©ellement le destin du monde uchronique.  

    G√©n√®re maintenant la suite de l‚Äôhistoire en respectant ces principes.
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system",
                 "content": "Tu es un narrateur expert en uchronie. Ta mission est de cr√©er une histoire immersive o√π chaque choix du joueur modifie le cours de l'histoire."},
                {"role": "user", "content": prompt}
            ],
            temperature=temperature
        )
        response_text = response.choices[0].message.content
    except Exception as e:
        print(f"üî¥ Erreur lors de l‚Äôappel OpenAI : {e}")
        return "Une erreur s'est produite lors de la g√©n√©ration de l'histoire. Essayez de relancer votre action."

    # Mettre √† jour le r√©sum√©
    update_summary(conversation_id, response_text)

    # Ajouter l'√©v√©nement g√©n√©r√© √† ChromaDB
    event_id = f"EVT_{conversation_id}_{len(events) + 1}"
    add_alternative_event(conversation_id, event_id, f"√âv√©nement {len(events) + 1}", response_text, summary)

    return response_text
